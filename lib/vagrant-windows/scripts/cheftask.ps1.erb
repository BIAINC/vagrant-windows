schtasks /query /tn "chef-solo"
if ($?) {
  # task already exists, kill it
  schtasks /delete /tn "chef-solo" /f
}

#schedule the task to run once in the far distant future
schtasks /create /tn "chef-solo" /xml <%= options[:chef_task_xml] %> /ru "<%= options[:user] %>" /rp "<%= options[:pass] %>"

# start the scheduled task right now
schtasks /run /tn "chef-solo"

# wait for run_chef.ps1 to start or timeout after 1 minute
#$maxIterations = 60*100
#$iterations = 0
#while (! ((Test-Path <%= options[:chef_task_running] %>) -and ($iterations -lt $maxIterations))) {
#  Start-Sleep -m 100
#  $iterations++
#}

#if ($iterations -eq $maxIterations) {
#  Write-Error "Failed to start chef scheduled task"
#  exit -2
#}

# wait for the scheduled task to start
Start-Sleep 2

# read the entire file, but only write out new lines we haven't seen before
$numLinesRead = 0
$success = $TRUE
while (Test-Path <%= options[:chef_task_running] %>) {
  Start-Sleep -m 100
  
  $text = (get-content "<%= options[:chef_stdout_log] %>")
  $numLines = ($text | Measure-Object -line).lines    
  $numLinesToRead = $numLines - $numLinesRead
  
  $text | select -first $numLinesToRead -skip $numLinesRead | ForEach {
    $success = $success -and "$_".contains("ERROR: Running exception handlers")
    Write-Host "$_"
  }
  $numLinesRead += $numLinesToRead
}

$exitCode = switch($success) { $TRUE { 0 } default { 1 }}
exit $exitCode
